{"version":3,"sources":["views/master/bankGuaranteeApplication/bgaActionForm.js"],"names":["BgaAction","useState","Date","picker","setPicker","useForm","defaultValues","isRegisteredOffice","initialvalues","register","errors","control","setValue","id","name","email","isVerified","logo","phone","panNumber","user","value","label","City","State","Country","Role","values","setValues","userData","useEffect","tag","sm","onSubmit","e","preventDefault","md","for","className","classNamePrefix","isClearable","options","theme","selectThemeColors","onChange","data","type","placeholder","defaultValue","amountRequested","Number","EmployeeNumber","creditLimit","sizeOfCredit","numberOfDays","finalAmountOfCreditLimit","financialPartner","date","comment","guarantee","Ripple","color","outline"],"mappings":"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","file":"static/js/264.6e5b1714.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect, Fragment } from 'react'\nimport Flatpickr from 'react-flatpickr'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\nimport classnames from 'classnames'\n// ** Third Party Components\nimport { Lock, Edit, Trash2, MapPin } from 'react-feather'\nimport { Media, Row, Col, Button, Form, Input, Label, FormGroup, Table, CustomInput, CardHeader, CardBody, Card, CardTitle } from 'reactstrap'\nimport Select from 'react-select'\nimport { selectThemeColors, isObjEmpty } from '@utils'\nimport { useForm, Controller } from 'react-hook-form'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\n\nconst BgaAction = () => {\n\n    const [picker, setPicker] = useState(new Date())\n  const [data, setData] = useState(null)\n  const { register, errors, control, setValue } = useForm({\n    defaultValues: { isRegisteredOffice: 'No' }\n  })\n\n  const optionCountry = [\n    {value: \"India\", label: \"India\"},\n    {value: \"UK\", label: \"UK\"},\n    {value: \"USA\", label: \"USA\"},\n    {value: \"Australia\", label: \"Australia\"},\n    {value: \"China\", label: \"China\"},\n    {value: \"Russia\", label: \"Russia\"}\n  ]\n  const optionRole = [\n    {value: \"Admin\", label: \"Admin\"},\n    {value: \"Intern\", label: \"Intern\"},\n    {value: \"Full-time Employee\", label: \"Full-time Employee\"}\n  ]\n\n  const optionState = [\n    {value: \"Maharashtra\", label: \"Maharashtra\"},\n    {value: \"Andhra Pradesh\", label: \"Andhra Pradesh\"},\n    {value: \"Kerala\", label: \"Kerala\"},\n    {value: \"Telangana\", label: \"Telangana\"},\n    {value: \"Karnataka\", label: \"Karnataka\"},\n    {value: \"Gujarat\", label: \"Gujarat\"}\n  ]\n  const optionCity = [\n    {value: \"Pune\", label: \"Pune\"},\n    {value: \"Mumbai\", label: \"Mumbai\"},\n    {value: \"Nagpur\", label: \"Nagpur\"},\n    {value: \"Nashik\", label: \"Nashik\"},\n    {value: \"Solapur\", label: \"Solapur\"}\n  ]\n  const optionuser = [\n    {value: \"Pravin Poshmani\", label: \"Pravin Poshmani\"},\n    {value: \"Tejas Thakare\", label: \"Tejas Thakare\"},\n    {value: \"Komal Kamble\", label: \"Komal Kamble\"}\n  ]\n  const optionCurrency = [\n    {value: \"Indian Rupee\", label: \"Indian Rupee\"},\n    {value: \"Us Dollar\", label: \"Us Dollar\"},\n    {value: \"Euro\", label: \"Euro\"},\n    {value: \"Armerian Dram\", label: \"Armerian Dram\"},\n    {value: \"Canadian Dollar\", label: \"Canadian Dollar\"}\n  ]\n  const initialvalues = {\n    id:1,\n    name: \"\",\n    email: \"\",\n    isRegisteredOffice: \"\",\n    isVerified: \"\",\n    logo : \"\",\n    phone : \"\",\n    panNumber: \"\",\n    user:  [{value: \"Pravin Poshmani\", label: \"Pravin Poshmani\"}],\n    City:  [{value: \"city\", label: \"Mumbai\"}], \n    State:  [{value: \"state\", label: \"Maharashtra\"}],\n    Country: [{value: \"country\", label: \"India\"}],\n    Role: [{value: \"role\", label: \"Intern\"}]\n  }\n  const [values, setValues] = useState(initialvalues)\n  const handleInputeChange = (event) => {\n    const {name, value} = event.target\n    setValues(\n    {\n      ...values,\n      [name] : value\n    }\n    )\n  }\n\n  const submitHandle = (event) => {\n    console.log(values)\n    //prop.editAction(values)\n    setValues(initialvalues)\n  }\n  const selectedUser = {\n    avatar: \"\",\n    company: \"Yotz PVT LTD\",\n    contact: \"(479) 232-9151\",\n    country: \"El Salvador\",\n    currentPlan: \"enterprise\",\n    email: \"gslixby0@abc.net.au\",\n    fullName: \"Coense Solution\",\n    id: 1,\n    role: \"editor\",\n    status: \"inVerified\",\n    username: \"gslixby0\"\n      }\n  //console.log(selectedUser)\n  // ** States\n  const [img, setImg] = useState(null)\n  const [userData, setUserData] = useState(null)\n  // ** Function to change user image\n  const onChange = e => {\n    const reader = new FileReader(),\n      files = e.target.files\n    reader.onload = function () {\n      setImg(reader.result)\n    }\n    reader.readAsDataURL(files[0])\n  }\n\n  // ** Update user image on mount or change\n  useEffect(() => {\n    // if (selectedUser !== null || (selectedUser !== null && userData !== null && selectedUser.id !== userData.id)) {\n    //   setUserData(selectedUser)\n    //   if (selectedUser.avatar.length) {\n    //     return setImg(selectedUser.avatar)\n    //   } else {\n    //     return setImg(null)\n    //   }\n    // }\n  })\n\n  // ** Renders User\n  const renderUserAvatar = () => {\n    if (img === null) {\n      const stateNum = Math.floor(Math.random() * 6),\n        states = ['light-success', 'light-danger', 'light-warning', 'light-info', 'light-primary', 'light-secondary'],\n        color = states[stateNum]\n      return (\n        <Avatar\n          initials\n          color={color}\n          className='rounded mr-2 my-25'\n          content={selectedUser.fullName}\n          contentStyles={{\n            borderRadius: 0,\n            fontSize: 'calc(36px)',\n            width: '100%',\n            height: '100%'\n          }}\n          style={{\n            height: '90px',\n            width: '90px'\n          }}\n        />\n      )\n    } else {\n      return (\n        <img\n          className='user-avatar rounded mr-2 my-25 cursor-pointer'\n          src={img}\n          alt='user profile avatar'\n          height='90'\n          width='90'\n        />\n      )\n    }\n  }\n\n  return (\n \n<Card>\n<CardHeader>\n  <CardTitle tag='h1'>BGA Approve / Reject</CardTitle>\n</CardHeader>\n\n<CardBody>\n<Row>\n<Col sm='12'>\n  <Form onSubmit={e => e.preventDefault()}>\n    <Row>\n    <Col md='6' sm='12'>\n        <FormGroup>\n              <Label for='user'>User</Label>\n            <Select\n              id='user'\n              className='react-select'\n              classNamePrefix='select'\n              isClearable={false}\n              options={optionuser}\n              theme={selectThemeColors}\n              value={values.user[0]}\n              onChange={data => {\n\n\n                                 setValues(\n                                          {\n                                             ...values,\n                                             user : data\n                                          } \n                                  )\n                                }\n                        }\n            />\n            </FormGroup> \n        </Col>\n    <Col md='6' sm='12'>\n        <FormGroup>\n          <Label for='amountRequested'>Amount Requested</Label>\n          <Input type='text' id='amountRequested' placeholder='Amount Requested' defaultValue={userData && userData.amountRequested} />\n        </FormGroup>\n      </Col>\n      <Col md='6' sm='12'>\n        <FormGroup>\n          <Label for='corporateName'>Corporate Name</Label>\n          <Input type='text' Number='corporateName' placeholder='Corporate Name' defaultValue={userData && userData.EmployeeNumber} />\n        </FormGroup>\n      </Col>\n      <Col md='6' sm='12'>\n        <FormGroup>\n          <Label for='creditLimit'>Credit Limit</Label>\n          <Input type='text' Number='creditLimit' placeholder='Credit Limit' defaultValue={userData && userData.creditLimit} />\n        </FormGroup>\n      </Col>\n      <Col md='6' sm='12'>\n        <FormGroup>\n          <Label for='sizeOfCredit'>Size of Credit</Label>\n          <Input type='text' Number='sizeOfCredit' placeholder='Size of Credit' defaultValue={userData && userData.sizeOfCredit} />\n        </FormGroup>\n      </Col>\n      <Col md='6' sm='12'>\n        <FormGroup>\n          <Label for='numberOfDays'>Number of Days</Label>\n          <Input type='text' Number='numberOfDays' placeholder='Number of Days' defaultValue={userData && userData.numberOfDays} />\n        </FormGroup>\n      </Col>\n      <Col md='6' sm='12'>\n        <FormGroup>\n          <Label for='finalAmountOfCreditLimit'>Final Amount Of Credit Limit</Label>\n          <Input type='text' Number='finalAmountOfCreditLimit' placeholder='Final Amount Of Credit Limit' defaultValue={userData && userData.finalAmountOfCreditLimit} />\n        </FormGroup>\n      </Col>\n      <Col md='6' sm='12'>\n        <FormGroup>\n          <Label for='financialPartner'>Financial Partner</Label>\n          <Input type='text' Number='financialPartner' placeholder='Financial Partner' defaultValue={userData && userData.financialPartner} />\n        </FormGroup>\n      </Col>\n      <Col md='6' sm='12'>\n      <FormGroup>\n      <Fragment>\n         <Label for='default-picker'>Approved Date</Label>\n      <Flatpickr className='form-control' value={picker} onChange={date => setPicker(date)} id='default-picker' />\n        </Fragment>\n            </FormGroup> \n      </Col>\n      <Col md='6' sm='12'>\n      <FormGroup>\n      <Fragment>\n         <Label for='default-picker'>Reject Date</Label>\n      <Flatpickr className='form-control' value={picker} onChange={date => setPicker(date)} id='default-picker' />\n        </Fragment>\n            </FormGroup> \n      </Col>\n      <Col md='6' sm='12'>\n        <FormGroup>\n          <Label for='comment'>Comment</Label>\n          <Input type='textarea' Number='comment' placeholder='Comment' defaultValue={userData && userData.comment} />\n        </FormGroup>\n      </Col>\n      <Col md='6' sm='12'>\n      <FormGroup>\n      <Fragment>\n         <Label for='default-picker'>Valid Till</Label>\n      <Flatpickr className='form-control' value={picker} onChange={date => setPicker(date)} id='default-picker' />\n        </Fragment>\n            </FormGroup> \n      </Col>\n      <Col md='6' sm='12'>\n        <FormGroup>\n          <Label for='guarantee'>Guarantee</Label>\n          <Input type='text' Number='guarantee' placeholder='Guarantee' defaultValue={userData && userData.guarantee} />\n        </FormGroup>\n      </Col>\n      <hr/>\n      <Col className='d-flex flex-sm-row flex-column mt-2' sm='12'>\n        <Button.Ripple className='mb-1 mb-sm-0 mr-0 mr-sm-1' type='submit' color='primary'>\n          Save Changes\n        </Button.Ripple>\n        <Button.Ripple color='secondary' outline>\n          Reset\n        </Button.Ripple>\n      </Col>\n    </Row>\n  </Form>\n</Col>\n</Row>\n</CardBody>\n</Card>\n  )\n}\nexport default BgaAction\n"],"sourceRoot":""}