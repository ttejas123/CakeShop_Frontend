{"version":3,"sources":["views/master/subCat/SubAttributes/add.js","views/master/subCat/SubAttributes/data.js","@core/components/repeater/index.js"],"names":["UserAccountTab","prop","useState","targetKeysA","settargetKeysA","mockDataA","setmockDataA","useEffect","mockData","i","data","key","toString","title","description","chosen","Math","random","push","getMock","optionSubC","value","label","initialvalues","id","Cat","subCat","subAttributes","values","setValues","Date","sm","className","onSubmit","e","preventDefault","md","for","name","onChange","event","target","placeholder","type","defaultChecked","onClick","console","log","checked","val","length","inline","map","classNamePrefix","isClearable","options","theme","selectThemeColors","Ripple","color","index","splice","deleteForm","outline","size","dataSource","showSearch","filterOption","inputValue","option","indexOf","targetKeys","onSearch","dir","render","item","alert","submitHandle","Repeater","props","count","tag","children","component","rest","Tag","items","defaultProps"],"mappings":"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","file":"static/js/262.875f1a11.chunk.js","sourcesContent":["// ** React Imports\nimport { ReactSortable } from 'react-sortablejs'\nimport { useParams } from 'react-router-dom'\nimport Repeater from '@components/repeater'\nimport Select from 'react-select'\nimport { selectThemeColors, isObjEmpty } from '@utils'\nimport { useState, useEffect } from 'react'\nimport Flatpickr from 'react-flatpickr'\nimport { MoreVertical, User, Users, Edit, Calendar, FileText, Archive, Trash,  MapPin, DollarSign, X, Plus  } from 'react-feather'\nimport { data } from './data'\nimport 'antd/dist/antd.css'\nimport { Transfer } from 'antd'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\n\nimport { Media, Row, Col, Button, Form, Input, Label, FormGroup, Table, InputGroup, InputGroupAddon, InputGroupText,  Card, CardHeader,\n  CardBody, Badge, ListGroupItem,\n  CardTitle, CustomInput } from 'reactstrap'\n\nconst UserAccountTab = (prop) => {\n  const [targetKeysA, settargetKeysA] = useState([])\n  const [mockDataA, setmockDataA] = useState([])\n  const getMock = () => {\n    const targetKeys = []\n    const mockData = []\n    let i = 0\n    while (i < 20) {\n      const data = {\n        key: i.toString(),\n        title: `Attribute${i + 1}`,\n        description: `description of content${i + 1}`,\n        chosen: Math.random() * 2 > 1\n      }\n      // if (data.chosen) {\n      //   targetKeys.push(data.key)\n      // }\n      mockData.push(data)\n      i++\n    }\n   \n    //settargetKeysA(targetKeys)\n    setmockDataA(mockData)\n   // this.setState({ mockData, targetKeys })\n  }\n\n  useEffect(() => {\n      getMock()\n  }, [])\n\n  const filterOption = (inputValue, option) => option.description.indexOf(inputValue) > -1\n\n  const handleChangeInTarg = targetKeys => {\n    settargetKeysA(targetKeys)\n  }\n\n  const handleSearch = (dir, value) => {\n    console.log('search:', dir, value)\n  }\n\n  const [count, setCount] = useState(1)\n  \n\n  const optionBidStatus = [\n    {value: \"height\", label: \"height\"},\n    {value: \"width\", label: \"width\"},\n    {value: \"Brand\", label: \"Brand\"},\n    {value: \"Manifacturing Date\", label: \"Manifacturing Date\"},\n    {value: \"material\", label: \"material\"},\n    {value: \"SmoothNess\", label: \"SmoothNess\"}\n  ]\n\n  const optionSubC = [\n    {value: \"Men's Ware\", label: \"Men's Ware\"},\n    {value: \"T-shirt\", label: \"T-shirt\"},\n    {value: \"Sport's T-shirt\", label: \"Sport's T-shirt\"}\n  ]\n\n  const initialvalues = {\n    id:0,\n    Cat: \"\",\n    subCat: [],\n    subAttributes: []\n  }\n  const [selectedOption, setselectedOption] = useState()\n  const [values, setValues] = useState(initialvalues)\n  const [allDay, setAllDay] = useState(false)\n  const [endPicker, setEndPicker] = useState(new Date())  \n  // ** Custom close btn\n  const increaseCount = (e, i) => {\n      console.log(e.target.checked)\n       if (e.target.checked) {\n              const val = values.subCat\n               val.length = i + 1\n              setValues({\n                ...values,\n                subCat : [...val]\n                })\n       } else {\n              setValues({\n                ...values,\n                subCat : [...values.subCat, '']\n              })\n        }   \n  }\n\n  //for other input\n  const handleInputeChange = (event) => {\n    const {name, value} = event.target\n    setValues(\n    {\n      ...values,\n      [name] : value\n    }\n    )\n  }\n  //for drop down\n  const handleChange = (selectedOption) => {\n    \n    setValues(\n      {\n        ...values,\n        Currency : selectedOption.value\n      }\n    )\n  }\n\n  const submitHandle = (event) => {\n    const value = []\n    targetKeysA.map((val) => {\n      value.push(mockDataA[val])\n    })\n\n    console.log({\n      ...values,\n      subAttributes : value\n    })\n    //prop.editAction(values)\n    \n    setValues(initialvalues)\n    settargetKeysA([])\n    alert(\"Data successfully inserted\")\n  }\n\n  const handleInput = (i, e) => {\n    const { name, value } = event.target\n    const val = [...values.subCat]\n    val[i] = value\n    setValues({\n      ...values,\n      subCat : val\n    })\n\n  }\n\n  const deleteForm = (e, index) => {\n    e.preventDefault()\n    const val = values.subCat\n    val.splice(index, 1)\n    setValues({\n      ...values,\n      subCat : [...val]\n    })\n    \n  }\n  return (\n    <Card>\n    <Row>\n      \n        <Col sm='12' className=\"pl-5 pt-2\">\n          <h2 className=\"mb-1\">Add Your Category</h2>\n        </Col>\n      \n      <CardBody className='pl-3 pt-2'>\n      <Col sm='12'>\n        <Form onSubmit={e => e.preventDefault()}>\n          <Row>\n\n            <Col md='6' sm='12'>\n              <FormGroup>\n                <Label for='Name'>Category</Label>\n                <InputGroup>\n                  \n                  <Input name=\"Cat\" onChange={handleInputeChange} id='Cat' placeholder='Textile' value={values.Cat} />\n                </InputGroup>\n              </FormGroup>\n              <CustomInput\n                  type='switch'\n                  defaultChecked\n                  onClick={ (e) => {\n                            console.log(e.target.checked)\n                            if (e.target.checked) {\n                                            const val = values.subCat\n                                            val.length = 0\n                                            setValues({\n                                              ...values,\n                                              subCat : [...val]\n                                            })\n                            } else {\n                               setValues({\n                                  ...values,\n                                  subCat : [...values.subCat, '']\n                               })\n                            }  \n                            }\n                          }\n                  id='exampleCustomSwitch'\n                  name='customSwitch'\n                  label='Is This A Parent Category'\n                  inline\n                />\n                <CustomInput\n                  defaultChecked\n                  type='switch'\n                  id='exampleCustomAvail'\n                  name='customSwitch'\n                  label='Customization avalibale'\n                  inline\n                />\n            </Col>\n\n            <Col md='12' sm='12'>\n                  { values.subCat.map((val, i) => {\n\n                    return (\n                        <Form key={i} onSubmit={ (e) => e.preventDefault() }>\n                          <Row className='justify-content-between align-items-center'>\n                            <Col md={6} className=\"mt-1\">\n                              <FormGroup>\n                                <Label for={`item-name-${i}`}>Sub Category Name</Label>\n                                \n                                <Select\n                                    id='BidStatus'\n                                    className='react-select'\n                                    classNamePrefix='select'\n                                    isClearable={false}\n                                    options={optionSubC}\n                                    theme={selectThemeColors}\n                                    value={values.subCat[i]}\n                                    onChange={data => {\n                                                        const val = [...values.subCat]\n                                                        val[i] = data\n                                                        setValues({\n                                                          ...values,\n                                                          subCat : val\n                                                        })\n                                                      }\n                                              }\n                                  />\n                              </FormGroup>\n                            </Col>\n                            \n                            <Col md={4} className=\"mt-2\">\n                              <Button.Ripple color='danger' className='text-nowrap px-1' onClick={ (e) => deleteForm(e, i)} outline>\n                                <X size={14} className='mr-50' />\n                                <span>Delete</span>\n                              </Button.Ripple>\n                            </Col>\n                            \n                          </Row>\n                      </Form>\n                      )\n                  }\n                  )}\n                  {values.Cat === \"\" ? null : (\n                    <div className=\"mt-1\">Pathing: <b>{ values.Cat } </b> > { values.subCat[0] ? <b> { values.subCat[0].value } </b> : null } </div>\n                  )}\n              <hr />\n            </Col>\n\n            <Col>\n                <h3 className=\"mb-2 mt-2\"> Select Attributes </h3>\n                <Transfer\n                  dataSource={mockDataA}\n                  showSearch\n                  filterOption={filterOption}\n                  targetKeys={targetKeysA}\n                  onChange={handleChangeInTarg}\n                  onSearch={handleSearch}\n                  render={item => item.title}\n                />\n            </Col>\n\n            <Col className='d-flex flex-sm-row flex-column mt-2' sm='12'>\n              <Button.Ripple className='mb-1 mb-sm-0 mr-0 mr-sm-1' onClick={ e =>  {\n                                                          submitHandle()\n                                                        }\n                                                      } color='primary'>\n                Save Changes\n              </Button.Ripple>\n              <Button.Ripple color='secondary' onClick={ () => setValues(initialvalues) } outline>\n                Reset\n              </Button.Ripple>\n            </Col> \n          </Row>\n        </Form>\n      </Col>\n      </CardBody> \n    </Row>\n    </Card>\n  )\n}\nexport default UserAccountTab\n","\nexport const data = [\n      {\n        id:1,\n        Cat:\"Mobile\",\n        subCat: [{value: \"Camera\", label: \"Camera\"}],\n        subAttributes: [ \n                         {\n                            key: '0',\n                            title: `Attribute${0 + 1}`,\n                            description: `description of content${0 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '1',\n                            title: `Attribute${1 + 1}`,\n                            description: `description of content${1 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '2',\n                            title: `Attribute${2 + 1}`,\n                            description: `description of content${2 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          }\n                        ]\n      },\n      {\n        id:2,\n        Cat:\"Mobile\",\n        subCat: [{value: \"Display\", label: \"Display\"}],\n        subAttributes: [ \n                         {\n                            key: '1',\n                            title: `Attribute${1 + 1}`,\n                            description: `description of content${1 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '2',\n                            title: `Attribute${2 + 1}`,\n                            description: `description of content${2 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '3',\n                            title: `Attribute${3 + 1}`,\n                            description: `description of content${3 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          }\n                        ]\n      },\n      {\n        id:3,\n        Cat:\"Mobile\",\n        subCat: [{value: \"Back Cover\", label: \"Back Cover\"}],\n        subAttributes: [ \n                         {\n                            key: '0',\n                            title: `Attribute${0 + 1}`,\n                            description: `description of content${0 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '1',\n                            title: `Attribute${1 + 1}`,\n                            description: `description of content${1 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '2',\n                            title: `Attribute${2 + 1}`,\n                            description: `description of content${2 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          }\n                        ]\n        \n      },\n      {\n        id:4,\n        Cat:\"Men's Clothers\",\n        subCat: [{value: \"Back Cover\", label: \"Back Cover\"}],\n        subAttributes: [ \n                         {\n                            key: '1',\n                            title: `Attribute${1 + 1}`,\n                            description: `description of content${1 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '2',\n                            title: `Attribute${2 + 1}`,\n                            description: `description of content${2 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '3',\n                            title: `Attribute${3 + 1}`,\n                            description: `description of content${3 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          }\n                        ]\n        \n      },\n      {\n        id:5,\n        Cat:\"Men's Clothers\",\n        subCat: [{value: \"Back Cover\", label: \"Back Cover\"}],\n        subAttributes:  [\n                          {\n                            key: '0',\n                            title: `Attribute${0 + 1}`,\n                            description: `description of content${0 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '1',\n                            title: `Attribute${1 + 1}`,\n                            description: `description of content${1 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '2',\n                            title: `Attribute${2 + 1}`,\n                            description: `description of content${2 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          }\n                        ]\n        \n      },\n      {\n        id:6,\n        Cat:\"Mobile\",\n        subCat: [{value: \"Back Cover\", label: \"Back Cover\"}],\n        subAttributes: [ \n                         {\n                            key: '1',\n                            title: `Attribute${1 + 1}`,\n                            description: `description of content${1 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '2',\n                            title: `Attribute${2 + 1}`,\n                            description: `description of content${2 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '3',\n                            title: `Attribute${3 + 1}`,\n                            description: `description of content${3 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          }\n                        ]\n        \n      },\n      {\n        id:7,\n        Cat:\"Textile\",\n        subCat: [{value: \"Back Cover\", label: \"Back Cover\"}],\n        subAttributes:  [\n                          {\n                            key: '0',\n                            title: `Attribute${0 + 1}`,\n                            description: `description of content${0 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '1',\n                            title: `Attribute${1 + 1}`,\n                            description: `description of content${1 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '2',\n                            title: `Attribute${2 + 1}`,\n                            description: `description of content${2 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          }\n                        ]\n        \n      },\n      {\n        id:8,\n        Cat:\"Textile\",\n        subCat:[{value: \"Back Cover\", label: \"Back Cover\"}],\n        subAttributes:  [\n                          {\n                            key: '1',\n                            title: `Attribute${1 + 1}`,\n                            description: `description of content${1 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '2',\n                            title: `Attribute${2 + 1}`,\n                            description: `description of content${2 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          },\n                          {\n                            key: '3',\n                            title: `Attribute${3 + 1}`,\n                            description: `description of content${3 + 1}`,\n                            chosen: Math.random() * 2 > 1\n                          }\n                        ]\n        \n      }\n\n]","// ** Third Party Components\nimport PropTypes from 'prop-types'\n\nconst Repeater = props => {\n  // ** Props\n  const { count, tag, component, children, ...rest } = props\n\n  // ** Custom Tag\n  const Tag = tag\n\n  // ** Default Items\n  const items = []\n\n  // ** Loop passed count times and push it in items Array\n  for (let i = 0; i < count; i++) {\n    items.push(children(i))\n  }\n\n  return <Tag {...rest}>{items}</Tag>\n}\n\n// ** PropTypes\nRepeater.propTypes = {\n  count: PropTypes.number.isRequired,\n  tag: PropTypes.string.isRequired\n}\n\n// ** Default Props\nRepeater.defaultProps = {\n  tag: 'div'\n}\n\nexport default Repeater\n"],"sourceRoot":""}